/* The Handshake Game simulation */
/* Anthony Morphett, awmorp@gmail.com */



/* Generates a random set of numshakes handshakes between popsize people. */
function makeShakes(popsize,numshakes)
{
  /* This algorithm yields a complete set of handshakes about r% of the time, where r is given in the following table:
   *    # people  # handshakes  r
   *    50        2             75%
   *    50        3             58%
   *    50        4             44%
   *    50        5             35%
   *    50        6             28%
   *    50        7             22%
   *    100       2             77%
   *    100       3             61%
   *    100       4             50%
   *    100       5             39%
   *    200       2             78%
   *    200       3             64%
   *    200       4             53%
   *    200       5             44%
   *  (Generated by simulating 10,000 times)
   */
  var fails = [];
  var shakes = new Array(popsize);
  /* Initialise the shakes object */
  shakes = _.times( popsize, x=>[] );
  
  /* Perform handshakes */
  for( var i = 0; i < popsize; i++ )
  {
    var didFail = false;
    for( var j = 0; j < numshakes; j++ ) {
      if( shakes[i][j] == undefined )   // Need to do another shake
      {
        var possibilities = _
          .chain(_.range(0,popsize,1))     // Start with everyone
          .difference(shakes[i],[i])       // Can't shake hands with anyone you've already shaken hands with, or yourself
          .reject( k => (shakes[k].length >= numshakes) )  // Can't shake hands with anyone who's already done all their handshakes
          .value();
//        console.log("possibilities for " + i + ": ", possibilities );
        if(possibilities.length > 0) {
          var shakePartner = _.sample(possibilities);
//          console.log( i + " shakes with " + shakePartner );
          shakes[i].push(shakePartner);
          shakes[shakePartner].push(i);
        }
        else
        {
//          console.log( "makeShakes: no possibilities for person " + i );
          didFail = true;
        }
      }
    }
    if( didFail ) fails.push(i);
//    console.log( "After " + i + ": shakes=", shakes );
  }
//  console.log( "Final: ", shakes );
//  console.log( _.uniq(shakes.map(a => a.length)).length==1?"Shakes successful!":"Shake fail" );
  return( {"shakes": shakes,"fails":fails} );
}

function doShakes(n,popsize,numshakes)
{
  var successes = _.chain(_.range(0,n)).map(x=>makeShakes(popsize,numshakes)).filter(k=>k.fails.length==0).value().length;
  return( successes )
}


/* Simulates disease transmission according to handshake game rules for the given set of handshakes and infectious period T. */
function simulate(shakes, T)
{
  var S = [], I = [], R = [];
}
